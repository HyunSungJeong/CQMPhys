function [Num_DegMul, Etot, Qtot] = DegMul(J0,K0,I0,ff,Nkeep,Lambda,MaxSep)
    % local operators
    [FF,ZF,J_sp,IF] = getLocalSpace('FermionS','Acharge,SU2spin,SU2channel','NC',2);
    [Fs,Zs,J_sp,Es] = setItag('s00','op',FF(:),ZF,J_sp(:),IF.E);
    J_sp = -J_sp;           % spin operator generated by getLocalSpace and quadOp differs by sign!

    J_orb = quadOp(Fs,Fs,[0,0,2]);

    J_sp_orb = quadOp(Fs,Fs,[0,2,2]);
    J_sp_orb = J_sp_orb/2;

    F_imp = getsub(FF,1);
    Z_imp = getsub(ZF,2);
    E_imp = getsub(IF.E,2);
    S_sp = getsub(J_sp,1);
    S_orb = getsub(J_orb,1);
    [F_imp,Z_imp,E_imp,S_sp,S_orb] = setItag('L00','op',F_imp(:),Z_imp(:),E_imp,S_sp(:),S_orb(:));

    % local isometry and Hamiltonian
    A0 = getIdentity(E_imp,2,Es,2,'K00*',[1,3,2]);

    H0 = J0*contract(A0,'!2*',{J_sp,'!2*',{S_sp,A0}});              % spin-spin
    H0 = H0 + K0*contract(A0,'!2*',{J_orb,'!2*',{S_orb,A0}});       % orbital-orbital
    A = getIdentity(S_sp,3,S_orb,3,'op*');
    H0 = H0 + I0*contract(A0,'!2*',{contract(A,'1,2',contract(S_sp,'!3',S_orb,'!2'),'2,4'),'!2',{A0,J_sp_orb,'!2*'}});  % spin-orbital
    H0 = H0 + 1e-40*contract(A0,'!2*',A0);

    nrgdata = NRG_SL([],H0,A0,Lambda,ff{1}(2:end),FF,ZF,'Nkeep',Nkeep,'deps',1e-10);
    [Etot,Qtot,Qdiff] = plotE(nrgdata);

    ZeroTemp = nrgdata.HK{end-1};

    E = [];             % energy levels
    Num_Elev = [];      % number of different energy levels in same multiplet(used for making array of Quantum numbers)
    for it = (1:numel(ZeroTemp.data))
        a = size(ZeroTemp.data{it},1);
        b = size(ZeroTemp.data{it},2);
        temp = ZeroTemp.data{it};

        if b > 1
            if a > 1
                temp = diag(temp);
            else
                temp = transpose(temp);
            end
        end

        Num_Elev = cat(1,Num_Elev,numel(temp));
        E = cat(1,E,temp);
    end

    Q = [];             % Quantum numbers of each multiplets labeled by (E, Sp, OrbSp)
    for it = (1:size(ZeroTemp.Q{1},1))
        for itN = (1:Num_Elev(it))
            Q = cat(1,Q,ZeroTemp.Q{1}(it,:));
        end
    end
    
    [E,ids] = sort(E);  % sort energy levels
    Q = Q(ids,:);       % permute quantum numbers accordingly

    Num_DegMul = [];         % Number of degenerate multiplets
    cnt = 1;
    for it = (2:numel(E))
        if abs(E(it) - E(it-1)) < MaxSep
            cnt = cnt + 1;
        else
            Num_DegMul = cat(1,Num_DegMul,cnt);
            cnt = 1;
        end
    end
    if cnt > 1
        Num_DegMul = cat(1,Num_DegMul,cnt);
    end 
end